plugins {
    id "java-library"
    id "java"
    id "jacoco"
    id "maven-publish"
    id "signing"
    id "idea"
}

sourceCompatibility = 17
targetCompatibility = 17

group = 'io.github.neilwangweili'
version '1.0.1'

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-parameters"
}


idea {
    workspace.iws.withXml { provider ->
        def junitDefaults = provider.node.component.find { it.@name == 'RunManager' }.configuration.find {
            it.@type == 'JUnit'
        }
        junitDefaults.option.find { it.@name == 'WORKING_DIRECTORY' }.@value = '$MODULE_DIR$'
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.addStringOption("charset", "UTF-8")
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

test {
    useJUnitPlatform()
}

boolean isJacocoProject(Project aProject) {
    if (aProject.subprojects.size() > 0 && aProject.name != rootProject.name) return false
    return aProject.pluginManager.hasPlugin('jacoco')
}

task jacocoMerge(type: JacocoMerge) {
    def jacocoProjects = allprojects.findAll { isJacocoProject(it) }
    dependsOn = jacocoProjects.jacocoTestReport
    jacocoProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
}

task jacocoRootReport(type: JacocoReport, group: 'verification') {
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

task jacocoRootCoverageVerification(type: JacocoCoverageVerification, group: 'verification') {
    violationRules {
        rule {
            element = 'PACKAGE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}

static SourceSet[] getMainSourceSets(Set<Project> projects) {
    return projects.collect({ it.sourceSets.main }).toArray(new SourceSet[0])
}

void setJacocoTaskOptions(JacocoReportBase jacocoTask) {
    jacocoTask.dependsOn(jacocoMerge)
    jacocoTask.sourceSets getMainSourceSets(allprojects.findAll { isJacocoProject(it) })
    jacocoTask.executionData.from(files("${buildDir}/jacoco/jacocoMerge.exec"))
    afterEvaluate {
        jacocoTask.classDirectories.setFrom(files(jacocoTask.classDirectories.files.collect {
            fileTree(dir: it)
        }))
    }
}

task testReport(type: TestReport, group: 'verification') {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn allprojects*.test
}

setJacocoTaskOptions(jacocoRootReport)
setJacocoTaskOptions(jacocoRootCoverageVerification)

jacocoRootReport.dependsOn(testReport)
jacocoRootCoverageVerification.dependsOn(jacocoRootReport)
check.dependsOn(jacocoRootCoverageVerification)


dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.2")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.8.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.2")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.8.2")
    testRuntimeOnly("org.junit.platform:junit-platform-runner:1.8.2")
    testImplementation("org.mockito:mockito-core:4.6.1")
    testImplementation("org.mockito:mockito-junit-jupiter:4.6.1")
    testImplementation("org.assertj:assertj-core:3.23.1")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "epiphany"
            from components.java
            pom {
                name = "epiphany"
                description = "A lightweight dependency injection framework."
                url = "https://github.com/neilwangweili/epiphany"
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = "neilwangweili"
                        name = "Neil Wang"
                        email = "wangweili457@gmail.com"
                    }
                }
                scm {
                    connection = "https://github.com/neilwangweili/epiphany.git"
                    developerConnection = "https://github.com/neilwangweili/epiphany.git"
                    url = "https://github.com/neilwangweili/epiphany"
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            if (project.version.toString().endsWith("-SNAPSHOT")) {
                url = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            } else {
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    sign(publishing.publications.mavenJava)
}
